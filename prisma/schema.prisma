datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  slug         String   @unique
  firstName    String?
  lastName     String?
  profilePhoto String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  bio          String?
  groups                         Group[]
  jobLogs                        JobLog[]
  myAssignedRequests             Request[]                 @relation("RequestAssignees")
  myMentionedRequests            Request[]                 @relation("RequestMentions")
  myWatchedRequests              Request[]                 @relation("RequestWatchers")
  myCreatedRequests              Request[]                 @relation("RequestCreator")
  myUpdatedRequests              Request[]                 @relation("RequestUpdater")
  myRequests                     Request[]                 @relation("RequestRequester")
  requestTypesCreated            RequestType[]
  categoriesCreated              RequestCategory[]
  recievingReports               Request[]                 @relation("ReportRecipient")
  myCreatedLabel                 Label[]                   @relation("LabelCreator")
  myUpdatedComments              RequestComments[]         @relation("CommentUpdater")
  myComments                     RequestComments[]         @relation("CommentCreator")
  myMentionedComments            RequestComments[]         @relation("CommentMentions")
  RequestLabelHistory            RequestLabelHistory[]
  RequestAssigneeHistoryUpdater  RequestAssigneeHistory[]  @relation("AssigneeHistoryUpdater")
  RequestAssigneeHistory         RequestAssigneeHistory[]
  RequestRequesterHistoryUpdater RequestRequesterHistory[] @relation("RequesterHistoryUpdater")
  RequestRequesterHistory        RequestRequesterHistory[]
  RequestRecipientHistoryUpdater RequestRecipientHistory[] @relation("RecipientHistoryUpdater")
  RequestRecipientHistory        RequestRecipientHistory[]
}

model Group {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users  User[]
  labels Label[]

  requestTypeTextFieldOne   RequestType[] @relation("RequestTypeTextFieldOne")
  requestTypeTextFieldTwo   RequestType[] @relation("RequestTypeTextFieldTwo")
  requestTypeTextFieldThree RequestType[] @relation("RequestTypeTextFieldThree")
  requestTypeTextFieldFour  RequestType[] @relation("RequestTypeTextFieldFour")
  requestTypeTextFieldFive  RequestType[] @relation("RequestTypeTextFieldFive")

  requestTypeBooleanFieldOne   RequestType[] @relation("RequestTypeBooleanFieldOne")
  requestTypeBooleanFieldTwo   RequestType[] @relation("RequestTypeBooleanFieldTwo")
  requestTypeBooleanFieldThree RequestType[] @relation("RequestTypeBooleanFieldThree")

  requestTypeUserFieldOne   RequestType[] @relation("RequestTypeUserFieldOne")
  requestTypeUserFieldTwo   RequestType[] @relation("RequestTypeUserFieldTwo")
  requestTypeUserFieldThree RequestType[] @relation("RequestTypeUserFieldThree")

  requestTypeRequester RequestType[] @relation("RequestTypeRequester")
  requestTypeLabels    RequestType[] @relation("RequestTypeLabels")
}

model RequestCategory {
  id        Int      @id @default(autoincrement())
  name      String
  isDefault Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int

  requests Request[]
}

model RequestType {
  id          Int       @id @default(autoincrement())
  name        String
  menuText    String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  requests    Request[]

  showRequester   Boolean @default(true)
  requesterGroups Group[] @relation("RequestTypeRequester")
  requesterTitle  String  @default("Requester")

  showLabels   Boolean @default(true)
  labelsGroups Group[] @relation("RequestTypeLabels")
  labelsTitle  String  @default("Labels")

  creator   User @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int

  // text fields

  showTextFieldOne    Boolean @default(true)
  requireTextFieldOne Boolean @default(false)
  textFieldOneGroups  Group[] @relation("RequestTypeTextFieldOne")
  textFieldOneTitle   String  @default("Description")

  showTextFieldTwo    Boolean @default(true)
  requireTextFieldTwo Boolean @default(false)
  textFieldTwoGroups  Group[] @relation("RequestTypeTextFieldTwo")
  textFieldTwoTitle   String  @default("Purpose")

  showTextFieldThree    Boolean @default(true)
  requireTextFieldThree Boolean @default(false)
  textFieldThreeGroups  Group[] @relation("RequestTypeTextFieldThree")
  textFieldThreeTitle   String  @default("Criteria")

  showTextFieldFour    Boolean @default(true)
  requireTextFieldFour Boolean @default(false)
  textFieldFourGroups  Group[] @relation("RequestTypeTextFieldFour")
  textFieldFourTitle   String  @default("Parameters")

  showTextFieldFive    Boolean @default(true)
  requireTextFieldFive Boolean @default(false)
  textFieldFiveGroups  Group[] @relation("RequestTypeTextFieldFive")
  textFieldFiveTitle   String  @default("Schedule")

  // boolean fields

  showBooleanFieldOne   Boolean @default(true)
  booleanFieldOneGroups Group[] @relation("RequestTypeBooleanFieldOne")
  booleanFieldOneTitle  String  @default("Export To Excel")

  showBooleanFieldTwo   Boolean @default(true)
  booleanFieldTwoGroups Group[] @relation("RequestTypeBooleanFieldTwo")
  booleanFieldTwoTitle  String  @default("Regulatory")

  showBooleanFieldThree   Boolean @default(true)
  booleanFieldThreeGroups Group[] @relation("RequestTypeBooleanFieldThree")
  booleanFieldThreeTitle  String  @default("Supports Initiative")

  // user fields

  showUserFieldOne    Boolean @default(true)
  requireUserFieldOne Boolean @default(false)
  userFieldOneGroups  Group[] @relation("RequestTypeUserFieldOne")
  userFieldOneTitle   String  @default("Recipients")

  showUserFieldTwo    Boolean @default(true)
  requireUserFieldTwo Boolean @default(false)
  userFieldTwoGroups  Group[] @relation("RequestTypeUserFieldTwo")
  userFieldTwoTitle   String  @default("Members")

  showUserFieldThree    Boolean @default(true)
  requireUserFieldThree Boolean @default(false)
  userFieldThreeGroups  Group[] @relation("RequestTypeUserFieldThree")
  userFieldThreeTitle   String  @default("Committee")
}

model Label {
  id                  Int                   @id @default(autoincrement())
  name                String
  color               String?
  description         String?
  createdAt           DateTime              @default(now())
  groups              Group[]
  requests            Request[]
  creator             User                  @relation(name: "LabelCreator", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId           Int
  RequestLabelHistory RequestLabelHistory[]
}

model Request {
  id                 Int     @id @default(autoincrement())
  name               String?
  atlasId            Int?
  purpose            String?
  purposeText        String?
  criteria           String?
  criteriaText       String?
  parameters         String?
  parametersText     String?
  schedule           String?
  scheduleText       String?
  exportToExcel      String?
  regulatory         String?
  supportsInitiative String?
  description        String?
  descriptionText    String?
  devNotes           String?
  devNotesText       String?

  assignees        User[]                    @relation("RequestAssignees")
  mentions         User[]                    @relation("RequestMentions")
  recipients       User[]                    @relation("ReportRecipient")
  watchers         User[]                    @relation("RequestWatchers")
  labels           Label[]
  labelHistory     RequestLabelHistory[]     @relation("LabelHistory")
  assigneeHistory  RequestAssigneeHistory[]  @relation("AssigneeHistory")
  requesterHistory RequestRequesterHistory[] @relation("RequesterHistory")
  recipientHistory RequestRecipientHistory[] @relation("RecipientHistory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updater   User?    @relation(name: "RequestUpdater", fields: [updaterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updaterId Int?

  creator   User @relation(name: "RequestCreator", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int

  requester   User @relation(name: "RequestRequester", fields: [requesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requesterId Int

  category   RequestCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  type   RequestType? @relation(fields: [typeId], references: [id])
  typeId Int?

  comments RequestComments[]
}

model JobLog {
  id        Int       @id @default(autoincrement())
  quirrelId String    @default("-")
  runBy     User?     @relation(fields: [runById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runById   Int?
  name      String?
  fail      Int?
  message   String?
  started   DateTime?
  completed DateTime?
  status    String?
  createdAt DateTime  @default(now())
}

model RequestComments {
  id        Int     @id @default(autoincrement())
  request   Request @relation(fields: [requestId], references: [id])
  requestId Int

  creator   User     @relation(name: "CommentCreator", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int
  createdAt DateTime @default(now())

  updater   User?     @relation(name: "CommentUpdater", fields: [updaterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updaterId Int?
  updatedAt DateTime? @updatedAt

  mentions User[] @relation("CommentMentions")

  comment String?
}

model RequestLabelHistory {
  id        Int      @id @default(autoincrement())
  request   Request  @relation(name: "LabelHistory", fields: [requestId], references: [id])
  requestId Int
  label     Label    @relation(fields: [labelId], references: [id])
  labelId   Int
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int
  createdAt DateTime @default(now())
  added     Boolean // true = added, false = removed
}

model RequestAssigneeHistory {
  id         Int      @id @default(autoincrement())
  request    Request  @relation(name: "AssigneeHistory", fields: [requestId], references: [id])
  requestId  Int
  assignee   User     @relation(fields: [assigneeId], references: [id])
  assigneeId Int
  creator    User     @relation(name: "AssigneeHistoryUpdater", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId  Int
  createdAt  DateTime @default(now())
  added      Boolean // true = added, false = removed
}

model RequestRequesterHistory {
  id          Int      @id @default(autoincrement())
  request     Request  @relation(name: "RequesterHistory", fields: [requestId], references: [id])
  requestId   Int
  requester   User     @relation(fields: [requesterId], references: [id])
  requesterId Int
  creator     User     @relation(name: "RequesterHistoryUpdater", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId   Int
  createdAt   DateTime @default(now())
  added       Boolean // true = added, false = removed
}

model RequestRecipientHistory {
  id          Int      @id @default(autoincrement())
  request     Request  @relation(name: "RecipientHistory", fields: [requestId], references: [id])
  requestId   Int
  recipient   User     @relation(fields: [recipientId], references: [id])
  recipientId Int
  creator     User     @relation(name: "RecipientHistoryUpdater", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId   Int
  createdAt   DateTime @default(now())
  added       Boolean // true = added, false = removed
}
