datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  firstName    String?
  lastName     String?
  profilePhoto String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  groups                         Group[]
  myAssignedRequests             Request[]                 @relation("RequestAssignees")
  myMentionedRequests            Request[]                 @relation("RequestMentions")
  myWatchedRequests              Request[]                 @relation("RequestWatchers")
  myCreatedRequests              Request[]                 @relation("RequestCreator")
  myUpdatedRequests              Request[]                 @relation("RequestUpdater")
  myRequests                     Request[]                 @relation("RequestRequester")
  requestTypesCreated            RequestType[]
  categoriesCreated              RequestCategory[]
  recievingReports               Request[]                 @relation("ReportRecipient")
  myCreatedLabel                 Label[]                   @relation("LabelCreator")
  myUpdatedComments              RequestComments[]         @relation("CommentUpdater")
  myComments                     RequestComments[]         @relation("CommentCreator")
  myMentionedComments            RequestComments[]         @relation("CommentMentions")
  RequestLabelHistory            RequestLabelHistory[]
  RequestAssigneeHistoryUpdater  RequestAssigneeHistory[]  @relation("AssigneeHistoryUpdater")
  RequestAssigneeHistory         RequestAssigneeHistory[]
  RequestRequesterHistoryUpdater RequestRequesterHistory[] @relation("RequesterHistoryUpdater")
  RequestRequesterHistory        RequestRequesterHistory[]
  RequestRecipientHistoryUpdater RequestRecipientHistory[] @relation("RecipientHistoryUpdater")
  RequestRecipientHistory        RequestRecipientHistory[]
}

model Group {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model RequestCategory {
  id        Int      @id @default(autoincrement())
  name      String
  isDefault Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int

  requests Request[]
}

model RequestType {
  id                     Int       @id @default(autoincrement())
  name                   String
  menuText               String?
  description            String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  requests               Request[]
  showPurpose            Boolean   @default(true)
  showCriteria           Boolean   @default(true)
  showParameters         Boolean   @default(true)
  showSchedule           Boolean   @default(true)
  showRecipients         Boolean   @default(true)
  showExportToExcel      Boolean   @default(true)
  showRegulatory         Boolean   @default(true)
  showSupportsInitiative Boolean   @default(true)
  showDescription        Boolean   @default(true)
  showRequester          Boolean   @default(true)
  showLabels             Boolean   @default(true)
  creator                User      @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId              Int
}

model Label {
  id                  Int                   @id @default(autoincrement())
  name                String
  color               String?
  description         String?
  createdAt           DateTime              @default(now())
  requests            Request[]
  creator             User                  @relation(name: "LabelCreator", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId           Int
  RequestLabelHistory RequestLabelHistory[]
}

model Request {
  id                 Int     @id @default(autoincrement())
  name               String?
  atlasId            Int?
  purpose            String?
  purposeText        String?
  criteria           String?
  criteriaText       String?
  parameters         String?
  parametersText     String?
  schedule           String?
  scheduleText       String?
  exportToExcel      String?
  regulatory         String?
  supportsInitiative String?
  description        String?
  descriptionText    String?
  devNotes           String?
  devNotesText       String?

  assignees        User[]                    @relation("RequestAssignees")
  mentions         User[]                    @relation("RequestMentions")
  recipients       User[]                    @relation("ReportRecipient")
  watchers         User[]                    @relation("RequestWatchers")
  labels           Label[]
  labelHistory     RequestLabelHistory[]     @relation("LabelHistory")
  assigneeHistory  RequestAssigneeHistory[]  @relation("AssigneeHistory")
  requesterHistory RequestRequesterHistory[] @relation("RequesterHistory")
  recipientHistory RequestRecipientHistory[] @relation("RecipientHistory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updater   User?    @relation(name: "RequestUpdater", fields: [updaterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updaterId Int?

  creator   User @relation(name: "RequestCreator", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int

  requester   User @relation(name: "RequestRequester", fields: [requesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requesterId Int

  category   RequestCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  type   RequestType? @relation(fields: [typeId], references: [id])
  typeId Int?

  comments RequestComments[]
}

model RequestComments {
  id        Int     @id @default(autoincrement())
  request   Request @relation(fields: [requestId], references: [id])
  requestId Int

  creator   User     @relation(name: "CommentCreator", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int
  createdAt DateTime @default(now())

  updater   User?     @relation(name: "CommentUpdater", fields: [updaterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updaterId Int?
  updatedAt DateTime? @updatedAt

  mentions User[] @relation("CommentMentions")

  comment String?
}

model RequestLabelHistory {
  id        Int      @id @default(autoincrement())
  request   Request  @relation(name: "LabelHistory", fields: [requestId], references: [id])
  requestId Int
  label     Label    @relation(fields: [labelId], references: [id])
  labelId   Int
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int
  createdAt DateTime @default(now())
  added     Boolean // true = added, false = removed
}

model RequestAssigneeHistory {
  id         Int      @id @default(autoincrement())
  request    Request  @relation(name: "AssigneeHistory", fields: [requestId], references: [id])
  requestId  Int
  assignee   User     @relation(fields: [assigneeId], references: [id])
  assigneeId Int
  creator    User     @relation(name: "AssigneeHistoryUpdater", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId  Int
  createdAt  DateTime @default(now())
  added      Boolean // true = added, false = removed
}

model RequestRequesterHistory {
  id          Int      @id @default(autoincrement())
  request     Request  @relation(name: "RequesterHistory", fields: [requestId], references: [id])
  requestId   Int
  requester   User     @relation(fields: [requesterId], references: [id])
  requesterId Int
  creator     User     @relation(name: "RequesterHistoryUpdater", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId   Int
  createdAt   DateTime @default(now())
  added       Boolean // true = added, false = removed
}

model RequestRecipientHistory {
  id          Int      @id @default(autoincrement())
  request     Request  @relation(name: "RecipientHistory", fields: [requestId], references: [id])
  requestId   Int
  recipient   User     @relation(fields: [recipientId], references: [id])
  recipientId Int
  creator     User     @relation(name: "RecipientHistoryUpdater", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId   Int
  createdAt   DateTime @default(now())
  added       Boolean // true = added, false = removed
}
