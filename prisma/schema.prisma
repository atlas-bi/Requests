datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  firstName    String?
  lastName     String?
  profilePhoto String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  notes Note[]

  groups              Group[]
  myCreatedRequests   Request[]         @relation("RequestCreator")
  myRequests          Request[]         @relation("RequestRequester")
  requestTypesCreated RequestType[]
  categoriesCreated   RequestCategory[]
}

model Group {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model Note {
  id    Int    @id @default(autoincrement())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
}

model RequestCategory {
  id        Int      @id @default(autoincrement())
  name      String
  isDefault Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int

  requests Request[]
}

model RequestType {
  id                     Int       @id @default(autoincrement())
  name                   String
  menuText               String?
  description            String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  requests               Request[]
  showPurpose            Boolean   @default(true)
  showCriteria           Boolean   @default(true)
  showParameters         Boolean   @default(true)
  showSchedule           Boolean   @default(true)
  showRecipients         Boolean   @default(true)
  showExportToExcel      Boolean   @default(true)
  showRegulatory         Boolean   @default(true)
  showSupportsInitiative Boolean   @default(true)
  showDescription        Boolean   @default(true)
  showRequester          Boolean   @default(true)
  showTags               Boolean   @default(true)
  creator                User      @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId              Int
}

model Request {
  id                 Int     @id @default(autoincrement())
  name               String?
  atlasId            Int?
  purpose            String?
  criteria           String?
  parameters         String?
  schedule           String?
  recipients         String?
  exportToExcel      String?
  regulatory         String?
  supportsInitiative String?
  description        String?
  devNotes           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator   User @relation(name: "RequestCreator", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int

  requester   User @relation(name: "RequestRequester", fields: [requesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requesterId Int

  category   RequestCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  type   RequestType? @relation(fields: [typeId], references: [id])
  typeId Int?
}
