#!/usr/bin/env bash
# https://betterdev.blog/minimal-safe-bash-script-template/

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

# shellcheck disable=SC1091
. /usr/lib/atlas-requests/functions.sh

color() {
  RED=$(printf '\033[31m')
  GREEN=$(printf '\033[32m')
  YELLOW=$(printf '\033[33m')
  BLUE=$(printf '\033[34m')
  BOLD=$(printf '\033[1m')
  RESET=$(printf '\033[0m') # No Color
}

fmt_error() {
  echo "${RED}Error: $1${RESET}" >&2
}

fmt_install() {
  echo "${YELLOW}Installing: $1${RESET}"
}

fmt_blue() {
  echo "${BLUE}$1${RESET}"
}

fmt_green() {
  echo "${GREEN}$1${RESET}"
}

fmt_yellow() {
  echo "${YELLOW}$1${RESET}"
}

color

HIST_DATE=$(date +"%s_%Y_%m_%d")

mkdir -p "$BACKUP_DIR"

backup(){
    # backup old install, if there was an old install
    if [ -d "$BASE_DIR" ]; then

        fmt_blue "Creating backup of previous install"
        # make a db dump
        su - postgres -c "pg_dump $PG_DATABASE" > "$BASE_DIR/${PG_DATABASE}_${HIST_DATE}.sql"

        # copy config
        if [ -e "$USER_DIR/config" ]; then
            cp "$USER_DIR/config" "$BASE_DIR/config"
        fi

        tar -czf "$BACKUP_DIR/${PG_DATABASE}_backup_${HIST_DATE}.tar.gz" --exclude='*.sock' -C "$BASE_DIR" . --warning=no-file-changed  1>/dev/null
        fmt_blue "Backup saved to $BACKUP_DIR/${PG_DATABASE}_backup_${HIST_DATE}.tar.gz"

        # removed copied files
        rm "$BASE_DIR/config"
        rm "$BASE_DIR/${PG_DATABASE}_${HIST_DATE}.sql"
    fi
}

configure(){
    fmt_blue "Configuring Atlas requests."
    fmt_yellow "Stopping services"

    stop_services

    fmt_yellow "Verifying secrets"
    build_secrets

    fmt_yellow "Updating configuration"

    install_configuration
    load_configuration

    fmt_yellow "Building"
    npm_install_full
    npm_build
    npm_migrate

    fmt_yellow "Configuring Nginx"
    nginx_init

    if [ "$(pidof systemd)" != "" ]; then
      fmt_yellow "Setting up services"
      services
    fi

    fmt_yellow "Starting services"
    start_services

    recommendations
}

usage() {
  cat << EOF

${BOLD}Usage: $(basename "${BASH_SOURCE[0]}") [-h, -b, -c, -u]

${BLUE}Atlas Requests cli application.${RESET}

Available options:

    -h, --help        Print this help and exit
    -b, --backup      Create a backup of Atlas Requests
    -c, --configure   Reconfigure Atlas Requests
    -u, --upgrade     Upgrade Atlas Requests

Additional Altas Requests Help

$(recommendations)

EOF
  exit
}

upgrade() {
  apt update
  apt install atlas-requests
}


cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
}

die() {
  echo >&2 -e "${1-}"
  exit 1
}

parse_params() {
  while :; do
    # shellcheck disable=SC2317
    case "${1-}" in
    -h | --help) usage;break ;;
    -b | --backup) backup;break ;;
    -u | --upgrade) upgrade;break ;;
#    --no-color) NO_COLOR=1 ;;
    -c | --configure) configure;break ;; # example flag
    -?*) die "${RED}${BOLD}Unknown option: $1. Run $(basename "${BASH_SOURCE[0]}") -h for help.${RESET}";break ;;
    *)  die "${RED}${BOLD}Missing arguments. Run $(basename "${BASH_SOURCE[0]}") -h for help.${RESET}";break ;;
    esac
    shift
  done

  return 0
}

parse_params "$@"
