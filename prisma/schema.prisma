datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  firstName    String?
  lastName     String?
  profilePhoto String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  groups              Group[]
  myAssignedRequests  Request[]         @relation("RequestAssignees")
  myWatchedRequests   Request[]         @relation("RequestWatchers")
  myCreatedRequests   Request[]         @relation("RequestCreator")
  myRequests          Request[]         @relation("RequestRequester")
  requestTypesCreated RequestType[]
  categoriesCreated   RequestCategory[]
  subscribedRequests  Request[]         @relation("RequestSubsciber")
  recievingReports    Request[]         @relation("ReportRecipient")
  myCreatedLabel      Label[]           @relation("LabelCreator")
}

model Group {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model RequestCategory {
  id        Int      @id @default(autoincrement())
  name      String
  isDefault Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int

  requests Request[]
}

model RequestType {
  id                     Int       @id @default(autoincrement())
  name                   String
  menuText               String?
  description            String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  requests               Request[]
  showPurpose            Boolean   @default(true)
  showCriteria           Boolean   @default(true)
  showParameters         Boolean   @default(true)
  showSchedule           Boolean   @default(true)
  showRecipients         Boolean   @default(true)
  showExportToExcel      Boolean   @default(true)
  showRegulatory         Boolean   @default(true)
  showSupportsInitiative Boolean   @default(true)
  showDescription        Boolean   @default(true)
  showRequester          Boolean   @default(true)
  showLabels             Boolean   @default(true)
  creator                User      @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId              Int
}

model Label {
  id          Int       @id @default(autoincrement())
  name        String
  color       String?
  description String?
  createdAt   DateTime  @default(now())
  requests    Request[]
  creator     User      @relation(name: "LabelCreator", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId   Int
}

model Request {
  id                 Int     @id @default(autoincrement())
  name               String?
  atlasId            Int?
  purpose            String?
  purposeText        String?
  criteria           String?
  criteriaText       String?
  parameters         String?
  parametersText     String?
  schedule           String?
  scheduleText       String?
  exportToExcel      String?
  regulatory         String?
  supportsInitiative String?
  description        String?
  descriptionText    String?
  devNotes           String?
  devNotesText       String?

  assignees   User[]  @relation("RequestAssignees")
  subscribers User[]  @relation("RequestSubsciber")
  recipients  User[]  @relation("ReportRecipient")
  watchers    User[]  @relation("RequestWatchers")
  labels      Label[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator   User @relation(name: "RequestCreator", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int

  requester   User @relation(name: "RequestRequester", fields: [requesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requesterId Int

  category   RequestCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  type   RequestType? @relation(fields: [typeId], references: [id])
  typeId Int?
}
